#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ CV —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –æ—Ç 0 –¥–æ 100
"""
import os
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from cv_analysis.cv_analyzer import CVAnalyzer

def test_cv_analysis_with_scores():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ CV —Å –æ—Ü–µ–Ω–∫–∞–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ CV —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –æ—Ç 0 –¥–æ 100")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = CVAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç CV
    test_cv_text = """
    –ê–õ–ï–ö–°–ê–ù–î–† –ü–ï–¢–†–û–í
    Senior Backend Developer
    
    –û–ü–´–¢ –†–ê–ë–û–¢–´:
    Senior Backend Developer, TechCorp, 2020-2024
    - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ Python/FastAPI
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    - –ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥ junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    
    Backend Developer, StartupXYZ, 2018-2020
    - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ REST API –Ω–∞ Django
    - –†–∞–±–æ—Ç–∞ —Å PostgreSQL –∏ Redis
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    
    –û–ë–†–ê–ó–û–í–ê–ù–ò–ï:
    –ú–ì–£ –∏–º. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞, –§–∞–∫—É–ª—å—Ç–µ—Ç –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∫–∏–±–µ—Ä–Ω–µ—Ç–∏–∫–∏
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è, 2018
    
    –ù–ê–í–´–ö–ò:
    –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ: Python, FastAPI, Django, PostgreSQL, Redis, Docker, AWS
    –Ø–∑—ã–∫–∏: –†—É—Å—Å–∫–∏–π (—Ä–æ–¥–Ω–æ–π), –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (B2)
    –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: Git, Linux, VS Code, Postman
    
    –ü–†–û–ï–ö–¢–´:
    - E-commerce –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    - API –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (1M+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    job_description = """
    Senior Backend Developer
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - 5+ –ª–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Python
    - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å FastAPI/Django
    - –ó–Ω–∞–Ω–∏–µ PostgreSQL, Redis
    - –û–ø—ã—Ç —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    - –ó–Ω–∞–Ω–∏–µ Docker –∏ –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ B2+
    
    –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
    - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ backend API
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ö–æ–¥-—Ä–µ–≤—å—é –∏ –º–µ–Ω—Ç–æ—Ä–∏–Ω–≥
    - –†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
    """
    
    try:
        print("üìã –ê–Ω–∞–ª–∏–∑ CV –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏...")
        result1 = analyzer.analyze_cv_with_score(test_cv_text)
        
        print("üìã –ê–Ω–∞–ª–∏–∑ CV —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏...")
        result2 = analyzer.analyze_cv_with_score(test_cv_text, job_description)
        
        print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
        print("-" * 40)
        
        print("1. –ê–Ω–∞–ª–∏–∑ –±–µ–∑ –≤–∞–∫–∞–Ω—Å–∏–∏:")
        print(f"   –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {result1.get('overall_score', 'N/A')}/100")
        print(f"   –û—Ü–µ–Ω–∫–∞ –Ω–∞–≤—ã–∫–æ–≤: {result1.get('skills_score', 'N/A')}/100")
        print(f"   –û—Ü–µ–Ω–∫–∞ –æ–ø—ã—Ç–∞: {result1.get('experience_score', 'N/A')}/100")
        print(f"   –û—Ü–µ–Ω–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {result1.get('education_score', 'N/A')}/100")
        
        print("\n2. –ê–Ω–∞–ª–∏–∑ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π:")
        print(f"   –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {result2.get('overall_score', 'N/A')}/100")
        print(f"   –û—Ü–µ–Ω–∫–∞ –Ω–∞–≤—ã–∫–æ–≤: {result2.get('skills_score', 'N/A')}/100")
        print(f"   –û—Ü–µ–Ω–∫–∞ –æ–ø—ã—Ç–∞: {result2.get('experience_score', 'N/A')}/100")
        print(f"   –û—Ü–µ–Ω–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {result2.get('education_score', 'N/A')}/100")
        print(f"   –û—Ü–µ–Ω–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: {result2.get('match_score', 'N/A')}/100")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º score_breakdown
        if 'score_breakdown' in result2:
            print("\n   –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:")
            for key, value in result2['score_breakdown'].items():
                print(f"     {key}: {value}/100")
        
        print("\nüìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:")
        print(f"   {result2.get('recommendation', '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False

def test_candidate_comparison():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    print("=" * 60)
    
    analyzer = CVAnalyzer()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    candidates = [
        {
            "name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤",
            "summary": "Senior Backend Developer —Å 6 –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞",
            "skills": {
                "technical": ["Python", "FastAPI", "PostgreSQL", "Redis", "Docker"],
                "soft": ["–õ–∏–¥–µ—Ä—Å—Ç–≤–æ", "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–ú–µ–Ω—Ç–æ—Ä–∏–Ω–≥"]
            },
            "experience_years": 6,
            "education": "–ú–ì–£, –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è"
        },
        {
            "name": "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
            "summary": "Middle Backend Developer —Å 3 –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞",
            "skills": {
                "technical": ["Python", "Django", "PostgreSQL", "Git"],
                "soft": ["–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞"]
            },
            "experience_years": 3,
            "education": "–ú–§–¢–ò, –ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
        },
        {
            "name": "–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤",
            "summary": "Junior Backend Developer —Å 1 –≥–æ–¥–æ–º –æ–ø—ã—Ç–∞",
            "skills": {
                "technical": ["Python", "Flask", "SQLite"],
                "soft": ["–û–±—É—á–∞–µ–º–æ—Å—Ç—å", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"]
            },
            "experience_years": 1,
            "education": "–ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞, –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"
        }
    ]
    
    job_description = """
    Senior Backend Developer
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - 5+ –ª–µ—Ç –æ–ø—ã—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ Python
    - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å FastAPI/Django
    - –ó–Ω–∞–Ω–∏–µ PostgreSQL, Redis
    - –û–ø—ã—Ç —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
    - –ó–Ω–∞–Ω–∏–µ Docker –∏ –æ–±–ª–∞—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ B2+
    
    –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
    - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ backend API
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ö–æ–¥-—Ä–µ–≤—å—é –∏ –º–µ–Ω—Ç–æ—Ä–∏–Ω–≥
    - –†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
    """
    
    try:
        print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        from cv_analysis import CandidateComparisonMatrix
        comparison_matrix = CandidateComparisonMatrix()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        analyzed_candidates = []
        for candidate in candidates:
            # –°–æ–∑–¥–∞–µ–º CV —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            cv_text = f"""
            {candidate['name']}
            {candidate['summary']}
            
            –ù–∞–≤—ã–∫–∏: {', '.join(candidate['skills']['technical'])}
            –û–ø—ã—Ç: {candidate['experience_years']} –ª–µ—Ç
            –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {candidate['education']}
            """
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            analysis_result = analyzer.analyze_cv_with_score(cv_text, job_description)
            analyzed_candidates.append(analysis_result)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        result = comparison_matrix.generate_comparison_matrix(analyzed_candidates)
        
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
        print("-" * 40)
        
        if 'candidates' in result:
            for i, candidate in enumerate(result['candidates']):
                print(f"\nüë§ –ö–∞–Ω–¥–∏–¥–∞—Ç {i+1}:")
                print(f"   –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {candidate.get('overall_score', 'N/A')}/100")
                print(f"   –û—Ü–µ–Ω–∫–∞ –Ω–∞–≤—ã–∫–æ–≤: {candidate.get('skills_score', 'N/A')}/100")
                print(f"   –û—Ü–µ–Ω–∫–∞ –æ–ø—ã—Ç–∞: {candidate.get('experience_score', 'N/A')}/100")
        
        if 'comparison_summary' in result:
            print(f"\nüìà –°–≤–æ–¥–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:")
            print(f"   {result['comparison_summary']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ CV —Å –æ—Ü–µ–Ω–∫–∞–º–∏")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    from config import get_mistral_api_key
    api_key = get_mistral_api_key()
    if not api_key:
        print("‚ùå MISTRAL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test1_success = test_cv_analysis_with_scores()
    test2_success = test_candidate_comparison()
    
    print("\n" + "=" * 60)
    if test1_success and test2_success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 