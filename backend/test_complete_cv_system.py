#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ CV
"""
import os
import sys
import json
import requests
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from cv_analysis import CVAnalyzer, CandidateComparisonMatrix
from config import get_mistral_api_key

BASE_URL = "http://localhost:8000"

def test_cv_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CVAnalyzer"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CVAnalyzer")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = CVAnalyzer()
        print("‚úÖ CVAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π CV
        test_cv = """
        –ò–í–ê–ù –ò–í–ê–ù–û–í
        Senior Python Developer
        
        –û–ü–´–¢ –†–ê–ë–û–¢–´:
        Senior Python Developer, TechCorp, 2021-2024
        - –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ FastAPI
        - –†–∞–±–æ—Ç–∞ —Å PostgreSQL –∏ Redis
        - Docker –∏ Kubernetes
        - CI/CD —Å GitLab
        
        Middle Python Developer, StartupXYZ, 2019-2021
        - Django REST API
        - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        - Unit —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        –û–ë–†–ê–ó–û–í–ê–ù–ò–ï:
        –ú–ì–£, –§–∞–∫—É–ª—å—Ç–µ—Ç –í–ú–ö, 2019
        
        –ù–ê–í–´–ö–ò:
        Python, FastAPI, Django, PostgreSQL, Redis, Docker, Git
        """
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        print("\nüìã –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        simple_result = analyzer.analyze_cv_simple(test_cv)
        print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: {type(simple_result)}")
        
        # –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        print("\nüìã –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        detailed_result = analyzer.analyze_cv_detailed(test_cv)
        print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {list(detailed_result.keys())}")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        print("\nüìã –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å –æ—Ü–µ–Ω–∫–∞–º–∏...")
        scoring_result = analyzer.analyze_cv_with_score(test_cv)
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å –æ—Ü–µ–Ω–∫–∞–º–∏: {list(scoring_result.keys())}")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ü–µ–Ω–∫–∏
        if 'overall_score' in scoring_result:
            print(f"   –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {scoring_result['overall_score']}/100")
        if 'skills_score' in scoring_result:
            print(f"   –û—Ü–µ–Ω–∫–∞ –Ω–∞–≤—ã–∫–æ–≤: {scoring_result['skills_score']}/100")
        if 'experience_score' in scoring_result:
            print(f"   –û—Ü–µ–Ω–∫–∞ –æ–ø—ã—Ç–∞: {scoring_result['experience_score']}/100")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ CVAnalyzer: {e}")
        return False

def test_comparison_matrix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç CandidateComparisonMatrix"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CandidateComparisonMatrix")
    print("=" * 50)
    
    try:
        comparison = CandidateComparisonMatrix()
        print("‚úÖ CandidateComparisonMatrix –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates_data = [
            {
                "overall_score": 85,
                "skills_score": 90,
                "experience_score": 80,
                "experience_summary": {
                    "full_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                    "total_years_of_experience": "5"
                }
            },
            {
                "overall_score": 75,
                "skills_score": 80,
                "experience_score": 70,
                "experience_summary": {
                    "full_name": "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤",
                    "total_years_of_experience": "3"
                }
            }
        ]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        result = comparison.generate_comparison_matrix(candidates_data)
        print(f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {list(result.keys())}")
        
        if 'comparison_summary' in result:
            print(f"   –°–≤–æ–¥–∫–∞: {result['comparison_summary']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ CandidateComparisonMatrix: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç health check
        response = requests.get(f"{BASE_URL}/health")
        print(f"‚úÖ Health check: {response.status_code}")
        
        # –¢–µ—Å—Ç cv-analysis-status
        response = requests.get(f"{BASE_URL}/api/v1/analysis/cv-analysis-status")
        print(f"‚úÖ CV Analysis Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {data.get('new_system_available', False)}")
            print(f"   AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {data.get('ai_provider', 'N/A')}")
        
        # –¢–µ—Å—Ç summary-report (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        response = requests.get(f"{BASE_URL}/api/v1/analysis/summary-report/me")
        print(f"‚úÖ Summary Report: {response.status_code}")
        if response.status_code == 401:
            print("   –û–∂–∏–¥–∞–µ–º–æ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ API —Ç–µ—Å—Ç–∞—Ö: {e}")
        return False

def test_configuration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        api_key = get_mistral_api_key()
        print(f"‚úÖ Mistral API –∫–ª—é—á: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if api_key else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_vars = [
            'SUPABASE_URL',
            'SUPABASE_SERVICE_ROLE_KEY',
            'MISTRAL_API_KEY',
            'SECRET_KEY'
        ]
        
        for var in required_vars:
            value = os.getenv(var)
            status = "‚úÖ" if value else "‚ùå"
            print(f"{status} {var}: {'–ù–∞—Å—Ç—Ä–æ–µ–Ω' if value else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ CV")
    print("=" * 60)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_configuration),
        ("CVAnalyzer", test_cv_analyzer),
        ("CandidateComparisonMatrix", test_comparison_matrix),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", test_api_endpoints)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 