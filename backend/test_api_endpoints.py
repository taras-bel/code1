#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
"""
import requests
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BASE_URL = "http://localhost:8000"

def test_health():
    """–¢–µ—Å—Ç health check —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        print(f"‚úÖ Health check: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return False

def test_docs():
    """–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    try:
        response = requests.get(f"{BASE_URL}/docs")
        print(f"‚úÖ Docs: {response.status_code}")
        return True
    except Exception as e:
        print(f"‚ùå Docs failed: {e}")
        return False

def test_analysis_endpoints():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –¢–µ—Å—Ç cv-analysis-status (–ø—É–±–ª–∏—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
    try:
        response = requests.get(f"{BASE_URL}/api/v1/analysis/cv-analysis-status")
        print(f"‚úÖ cv-analysis-status endpoint: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {data.get('new_system_available', False)}")
            print(f"   AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {data.get('ai_provider', 'N/A')}")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status', 'N/A')}")
        else:
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}...")
    except Exception as e:
        print(f"‚ùå cv-analysis-status failed: {e}")
    
    # –¢–µ—Å—Ç summary-report (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    try:
        response = requests.get(f"{BASE_URL}/api/v1/analysis/summary-report/me")
        print(f"‚úÖ summary-report endpoint: {response.status_code}")
        if response.status_code == 401:
            print("   –û–∂–∏–¥–∞–µ–º–æ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        elif response.status_code == 200:
            print("   ‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç—á–µ—Ç")
    except Exception as e:
        print(f"‚ùå summary-report failed: {e}")
    
    # –¢–µ—Å—Ç detailed-analysis (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    try:
        response = requests.post(f"{BASE_URL}/api/v1/analysis/detailed-analysis")
        print(f"‚úÖ detailed-analysis endpoint: {response.status_code}")
        if response.status_code == 401:
            print("   –û–∂–∏–¥–∞–µ–º–æ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        elif response.status_code == 422:
            print("   –û–∂–∏–¥–∞–µ–º–æ: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        print(f"‚ùå detailed-analysis failed: {e}")

def test_files_endpoints():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/v1/files/")
        print(f"‚úÖ files list endpoint exists: {response.status_code}")
        if response.status_code == 501:
            print("   –û–∂–∏–¥–∞–µ–º–æ: —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"‚ùå files list failed: {e}")

def test_auth_endpoints():
    """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/v1/auth/")
        print(f"‚úÖ auth endpoint exists: {response.status_code}")
    except Exception as e:
        print(f"‚ùå auth failed: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if not test_health():
        print("\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: uvicorn main:app --reload")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    test_docs()
    test_analysis_endpoints()
    test_files_endpoints()
    test_auth_endpoints()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç")
    print("2. –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ 500, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    print("3. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Swagger UI: http://localhost:8000/docs")

if __name__ == "__main__":
    main() 